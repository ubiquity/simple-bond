{
  "address": "0x455D264a380f38D07a3DE725eB0362b408C9657a",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_tokenRewards",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_rewardPerBillion",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_vestingBlocks",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "addr",
          "type": "address"
        }
      ],
      "name": "balancesOf",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "balanceLP",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "balanceRewards",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "balanceUnlockLP",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "balanceClaimableRewards",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "addr",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "index",
          "type": "uint256"
        }
      ],
      "name": "bondBalancesOf",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "balanceLP",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "balanceRewards",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "balanceUnlockLP",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "balanceClaimableRewards",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "addr",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "index",
          "type": "uint256"
        }
      ],
      "name": "bondClaimableRewards",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "addr",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "index",
          "type": "uint256"
        }
      ],
      "name": "bondUnlockLP",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "addr",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "index",
          "type": "uint256"
        }
      ],
      "name": "bondVesting",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "bonds",
      "outputs": [
        {
          "internalType": "address",
          "name": "token",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "deposit",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "rewards",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "block",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "addr",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "claim",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "claimed",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "tokenDeposit",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "deposit",
      "outputs": [
        {
          "components": [
            {
              "internalType": "address",
              "name": "token",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "deposit",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "rewards",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "block",
              "type": "uint256"
            }
          ],
          "internalType": "struct SimpleBond.Bond",
          "name": "bond",
          "type": "tuple"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "rewardPerBillion",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "tokenRewards",
      "outputs": [
        {
          "internalType": "contract IERC20",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "totalDeposit",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "totalRewards",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "vestingBlocks",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "addr",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "withdraw",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "withdrawn",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0x1df9f73ffd98c4fcde644a58a919e62ed852e1b642fe13e5720299da0a147c28",
  "receipt": {
    "to": null,
    "from": "0x6eebAe27d69fa80f0E4C0E973A2Fed218A56880c",
    "contractAddress": "0x455D264a380f38D07a3DE725eB0362b408C9657a",
    "transactionIndex": 4,
    "gasUsed": "847175",
    "logsBloom": "0x00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000",
    "blockHash": "0x0385a631ea908c752a38dc91033c23a45122ac149bd45155551c7f07fb4426ba",
    "transactionHash": "0x1df9f73ffd98c4fcde644a58a919e62ed852e1b642fe13e5720299da0a147c28",
    "logs": [],
    "blockNumber": 9960507,
    "cumulativeGasUsed": "7617782",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0x387b78F055d2DeeDba54b5E81533EE1dD43dF615",
    1000,
    32300
  ],
  "numDeployments": 5,
  "solcInputHash": "adf5a09f6414c4e5847a3b583f825a27",
  "metadata": "{\"compiler\":{\"version\":\"0.8.9+commit.e5eed63a\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_tokenRewards\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_rewardPerBillion\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_vestingBlocks\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\"}],\"name\":\"balancesOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"balanceLP\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"balanceRewards\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"balanceUnlockLP\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"balanceClaimableRewards\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"}],\"name\":\"bondBalancesOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"balanceLP\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"balanceRewards\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"balanceUnlockLP\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"balanceClaimableRewards\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"}],\"name\":\"bondClaimableRewards\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"}],\"name\":\"bondUnlockLP\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"}],\"name\":\"bondVesting\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"bonds\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"deposit\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"rewards\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"block\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"claim\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"claimed\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"tokenDeposit\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"deposit\",\"outputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"deposit\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"rewards\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"block\",\"type\":\"uint256\"}],\"internalType\":\"struct SimpleBond.Bond\",\"name\":\"bond\",\"type\":\"tuple\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"rewardPerBillion\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"tokenRewards\",\"outputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalDeposit\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalRewards\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"vestingBlocks\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"withdraw\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"withdrawn\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/SimpleBond.sol\":\"SimpleBond\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address sender,\\n        address recipient,\\n        uint256 amount\\n    ) external returns (bool);\\n\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\",\"keccak256\":\"0x61437cb513a887a1bbad006e7b1c8b414478427d33de47c5600af3c748f108da\",\"license\":\"MIT\"},\"contracts/SimpleBond.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.9;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\n\\ncontract SimpleBond {\\n  IERC20 public immutable tokenRewards;\\n  uint256 public immutable rewardPerBillion;\\n  uint256 public immutable vestingBlocks;\\n\\n  struct Bond {\\n    address token;\\n    uint256 deposit;\\n    uint256 rewards;\\n    uint256 block;\\n  }\\n  mapping(address => Bond[]) public bonds;\\n  uint256 public totalDeposit;\\n  uint256 public totalRewards;\\n\\n  constructor(\\n    address _tokenRewards,\\n    uint256 _rewardPerBillion,\\n    uint256 _vestingBlocks\\n  ) {\\n    require(_tokenRewards != address(0), \\\"Invalid Reward token\\\");\\n    require(_rewardPerBillion > 0, \\\"Invalid Reward pourcentage\\\");\\n    require(_vestingBlocks > 0, \\\"Invalid Vesting blocks number\\\");\\n    tokenRewards = IERC20(_tokenRewards);\\n    rewardPerBillion = _rewardPerBillion;\\n    vestingBlocks = _vestingBlocks;\\n  }\\n\\n  function deposit(address tokenDeposit, uint256 amount) public returns (Bond memory bond) {\\n    require(IERC20(tokenDeposit).allowance(msg.sender, address(this)) >= amount, \\\"Not enough allowance\\\");\\n    require(IERC20(tokenDeposit).transferFrom(msg.sender, address(this), amount), \\\"Deposit failed\\\");\\n\\n    bond.token = tokenDeposit;\\n\\n    bond.deposit = amount;\\n    totalDeposit += amount;\\n\\n    uint256 rewards = ((amount * rewardPerBillion) / 1_000_000_000) * vestingBlocks;\\n    bond.rewards = rewards;\\n    totalRewards += rewards;\\n\\n    bond.block = block.number;\\n\\n    bonds[msg.sender].push(bond);\\n  }\\n\\n  function _bond(address addr, uint256 index) internal view returns (Bond memory) {\\n    return bonds[addr][index];\\n  }\\n\\n  function _bondVesting(Bond memory bond) internal view returns (bool) {\\n    assert(block.number >= bond.block);\\n    return (block.number - bond.block) < vestingBlocks;\\n  }\\n\\n  function bondVesting(address addr, uint256 index) public view returns (bool) {\\n    return _bondVesting(_bond(addr, index));\\n  }\\n\\n  function _bondUnlockLP(Bond memory bond) internal view returns (uint256) {\\n    return _bondVesting(bond) ? 0 : bond.deposit;\\n  }\\n\\n  function bondUnlockLP(address addr, uint256 index) public view returns (uint256) {\\n    return _bondUnlockLP(_bond(addr, index));\\n  }\\n\\n  function _bondClaimableRewards(Bond memory bond) internal view returns (uint256) {\\n    return _bondVesting(bond) ? (bond.rewards * (block.number - bond.block)) / vestingBlocks : bond.rewards;\\n  }\\n\\n  function bondClaimableRewards(address addr, uint256 index) public view returns (uint256) {\\n    return _bondClaimableRewards(_bond(addr, index));\\n  }\\n\\n  function _bondBalancesOf(Bond memory bond)\\n    internal\\n    view\\n    returns (\\n      uint256 balanceLP,\\n      uint256 balanceRewards,\\n      uint256 balanceUnlockLP,\\n      uint256 balanceClaimableRewards\\n    )\\n  {\\n    balanceLP = bond.deposit;\\n    balanceRewards = bond.rewards;\\n    balanceUnlockLP = _bondUnlockLP(bond);\\n    balanceClaimableRewards = _bondClaimableRewards(bond);\\n  }\\n\\n  function bondBalancesOf(address addr, uint256 index)\\n    public\\n    view\\n    returns (\\n      uint256 balanceLP,\\n      uint256 balanceRewards,\\n      uint256 balanceUnlockLP,\\n      uint256 balanceClaimableRewards\\n    )\\n  {\\n    return _bondBalancesOf(_bond(addr, index));\\n  }\\n\\n  function balancesOf(address addr)\\n    public\\n    view\\n    returns (\\n      uint256 balanceLP,\\n      uint256 balanceRewards,\\n      uint256 balanceUnlockLP,\\n      uint256 balanceClaimableRewards\\n    )\\n  {\\n    for (uint256 index = 0; index < bonds[addr].length; index += 1) {\\n      Bond memory bond = bonds[addr][index];\\n\\n      balanceLP += bond.deposit;\\n      balanceRewards += bond.rewards;\\n      balanceUnlockLP += _bondUnlockLP(bond);\\n      balanceClaimableRewards += _bondClaimableRewards(bond);\\n    }\\n  }\\n\\n  function bondWithdraw(\\n    address addr,\\n    uint256 amount,\\n    uint256 index\\n  ) internal returns (uint256 withdrawn) {\\n    Bond storage bond = bonds[addr][index];\\n\\n    if (_bondVesting(bond) || bond.deposit == 0) {\\n      withdrawn = 0;\\n    } else {\\n      withdrawn = (amount <= bond.deposit) ? amount : bond.deposit;\\n\\n      totalDeposit -= withdrawn;\\n      bond.deposit -= withdrawn;\\n\\n      IERC20(bond.token).transfer(msg.sender, withdrawn);\\n    }\\n  }\\n\\n  function bondClaim(\\n    address addr,\\n    uint256 amount,\\n    uint256 index\\n  ) internal returns (uint256 rewards) {\\n    Bond storage bond = bonds[addr][index];\\n\\n    if (_bondVesting(bond) || bond.rewards == 0) {\\n      rewards = 0;\\n    } else {\\n      rewards = (amount <= bond.rewards) ? amount : bond.rewards;\\n\\n      totalRewards -= rewards;\\n      bond.rewards -= rewards;\\n\\n      IERC20(tokenRewards).transfer(msg.sender, rewards);\\n    }\\n  }\\n\\n  function withdraw(address addr, uint256 amount) public returns (uint256 withdrawn) {\\n    for (uint256 index = 0; (index < bonds[addr].length) && (amount > 0); index += 1) {\\n      uint256 bondWithdrawn = bondWithdraw(addr, amount, index);\\n\\n      amount -= bondWithdrawn;\\n      withdrawn += bondWithdrawn;\\n    }\\n  }\\n\\n  function claim(address addr, uint256 amount) public returns (uint256 claimed) {\\n    for (uint256 index = 0; (index < bonds[addr].length) && (amount > 0); index += 1) {\\n      uint256 bondRewards = bondClaim(addr, amount, index);\\n\\n      amount -= bondRewards;\\n      claimed += bondRewards;\\n    }\\n  }\\n}\\n\",\"keccak256\":\"0x6cf277741b7ed8ef64df56bbb3f2ca48fe84bc37b252243104796821e12ea01e\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x60e060405234801561001057600080fd5b5060405161101e38038061101e83398101604081905261002f91610143565b6001600160a01b03831661008a5760405162461bcd60e51b815260206004820152601460248201527f496e76616c69642052657761726420746f6b656e00000000000000000000000060448201526064015b60405180910390fd5b600082116100da5760405162461bcd60e51b815260206004820152601a60248201527f496e76616c69642052657761726420706f757263656e746167650000000000006044820152606401610081565b6000811161012a5760405162461bcd60e51b815260206004820152601d60248201527f496e76616c69642056657374696e6720626c6f636b73206e756d6265720000006044820152606401610081565b6001600160a01b0390921660805260a05260c052610186565b60008060006060848603121561015857600080fd5b83516001600160a01b038116811461016f57600080fd5b602085015160409095015190969495509392505050565b60805160a05160c051610e476101d7600039600081816102c00152818161054c0152818161097a0152610c8d0152600081816101bf015261057501526000818160f40152610ac70152610e476000f3fe608060405234801561001057600080fd5b50600436106100ea5760003560e01c80638f4cd0981161008c578063f3fef3a311610066578063f3fef3a31461027c578063f6153ccd1461028f578063f89cbd5f14610298578063fee1a9c8146102bb57600080fd5b80638f4cd0981461024357806391c7bc7014610256578063aad3ec961461026957600080fd5b8063327d83b8116100c8578063327d83b81461017d5780633ccfa933146101ba57806347e7ef24146101e15780636392a51f1461023057600080fd5b8063091c76f5146100ef5780630e15561a14610133578063224eaa901461014a575b600080fd5b6101167f000000000000000000000000000000000000000000000000000000000000000081565b6040516001600160a01b0390911681526020015b60405180910390f35b61013c60025481565b60405190815260200161012a565b61015d610158366004610cdf565b6102e2565b60408051948552602085019390935291830152606082015260800161012a565b61019061018b366004610cdf565b61030a565b604080516001600160a01b039095168552602085019390935291830152606082015260800161012a565b61013c7f000000000000000000000000000000000000000000000000000000000000000081565b6101f46101ef366004610cdf565b61035a565b60405161012a919081516001600160a01b0316815260208083015190820152604080830151908201526060918201519181019190915260800190565b61015d61023e366004610d09565b610640565b61013c610251366004610cdf565b610743565b61013c610264366004610cdf565b61075e565b61013c610277366004610cdf565b610772565b61013c61028a366004610cdf565b6107e4565b61013c60015481565b6102ab6102a6366004610cdf565b61084f565b604051901515815260200161012a565b61013c7f000000000000000000000000000000000000000000000000000000000000000081565b6000806000806102fa6102f58787610863565b610913565b9299919850965090945092505050565b6000602052816000526040600020818154811061032657600080fd5b600091825260209091206004909102018054600182015460028301546003909301546001600160a01b039092169450925084565b61038e604051806080016040528060006001600160a01b031681526020016000815260200160008152602001600081525090565b604051636eb1769f60e11b815233600482015230602482015282906001600160a01b0385169063dd62ed3e9060440160206040518083038186803b1580156103d557600080fd5b505afa1580156103e9573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061040d9190610d24565b10156104575760405162461bcd60e51b81526020600482015260146024820152734e6f7420656e6f75676820616c6c6f77616e636560601b60448201526064015b60405180910390fd5b6040516323b872dd60e01b8152336004820152306024820152604481018390526001600160a01b038416906323b872dd90606401602060405180830381600087803b1580156104a557600080fd5b505af11580156104b9573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906104dd9190610d3d565b61051a5760405162461bcd60e51b815260206004820152600e60248201526d11195c1bdcda5d0819985a5b195960921b604482015260640161044e565b6001600160a01b03831681526020810182905260018054839190600090610542908490610d75565b90915550600090507f0000000000000000000000000000000000000000000000000000000000000000633b9aca0061059a7f000000000000000000000000000000000000000000000000000000000000000086610d8d565b6105a49190610dac565b6105ae9190610d8d565b90508082604001818152505080600260008282546105cc9190610d75565b909155505043606083019081523360009081526020818152604080832080546001808201835591855293839020875160049095020180546001600160a01b0319166001600160a01b039095169490941784559186015191830191909155840151600282015590516003909101555092915050565b60008060008060005b6001600160a01b03861660009081526020819052604090205481101561073b576001600160a01b038616600090815260208190526040812080548390811061069357610693610dce565b600091825260209182902060408051608081018252600490930290910180546001600160a01b03168352600181015493830184905260028101549183019190915260030154606082015291506106e99087610d75565b95508060400151856106fb9190610d75565b94506107068161093d565b6107109085610d75565b935061071b8161095f565b6107259084610d75565b92506107349050600182610d75565b9050610649565b509193509193565b60006107576107528484610863565b61095f565b9392505050565b600061075761076d8484610863565b61093d565b6000805b6001600160a01b0384166000908152602081905260409020548110801561079d5750600083115b156107dd5760006107af8585846109c2565b90506107bb8185610de4565b93506107c78184610d75565b92506107d69050600182610d75565b9050610776565b5092915050565b6000805b6001600160a01b0384166000908152602081905260409020548110801561080f5750600083115b156107dd576000610821858584610b56565b905061082d8185610de4565b93506108398184610d75565b92506108489050600182610d75565b90506107e8565b600061075761085e8484610863565b610c75565b610897604051806080016040528060006001600160a01b031681526020016000815260200160008152602001600081525090565b6001600160a01b03831660009081526020819052604090208054839081106108c1576108c1610dce565b600091825260209182902060408051608081018252600490930290910180546001600160a01b031683526001810154938301939093526002830154908201526003909101546060820152905092915050565b602081015160408201516000806109298561093d565b91506109348561095f565b90509193509193565b600061094882610c75565b610956578160200151610959565b60005b92915050565b600061096a82610c75565b610978578160400151610959565b7f00000000000000000000000000000000000000000000000000000000000000008260600151436109a99190610de4565b83604001516109b89190610d8d565b6109599190610dac565b6001600160a01b03831660009081526020819052604081208054829190849081106109ef576109ef610dce565b600091825260209182902060408051608081018252600490930290910180546001600160a01b0316835260018101549383019390935260028301549082015260038201546060820152909150610a4490610c75565b80610a5157506002810154155b15610a5f5760009150610b4e565b8060020154841115610a75578060020154610a77565b835b91508160026000828254610a8b9190610de4565b9250508190555081816002016000828254610aa69190610de4565b909155505060405163a9059cbb60e01b8152336004820152602481018390527f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03169063a9059cbb906044015b602060405180830381600087803b158015610b1457600080fd5b505af1158015610b28573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610b4c9190610d3d565b505b509392505050565b6001600160a01b0383166000908152602081905260408120805482919084908110610b8357610b83610dce565b600091825260209182902060408051608081018252600490930290910180546001600160a01b0316835260018101549383019390935260028301549082015260038201546060820152909150610bd890610c75565b80610be557506001810154155b15610bf35760009150610b4e565b8060010154841115610c09578060010154610c0b565b835b91508160016000828254610c1f9190610de4565b9250508190555081816001016000828254610c3a9190610de4565b9091555050805460405163a9059cbb60e01b8152336004820152602481018490526001600160a01b039091169063a9059cbb90604401610afa565b60008160600151431015610c8b57610c8b610dfb565b7f0000000000000000000000000000000000000000000000000000000000000000826060015143610cbc9190610de4565b1092915050565b80356001600160a01b0381168114610cda57600080fd5b919050565b60008060408385031215610cf257600080fd5b610cfb83610cc3565b946020939093013593505050565b600060208284031215610d1b57600080fd5b61075782610cc3565b600060208284031215610d3657600080fd5b5051919050565b600060208284031215610d4f57600080fd5b8151801515811461075757600080fd5b634e487b7160e01b600052601160045260246000fd5b60008219821115610d8857610d88610d5f565b500190565b6000816000190483118215151615610da757610da7610d5f565b500290565b600082610dc957634e487b7160e01b600052601260045260246000fd5b500490565b634e487b7160e01b600052603260045260246000fd5b600082821015610df657610df6610d5f565b500390565b634e487b7160e01b600052600160045260246000fdfea2646970667358221220087962b43b453ae80a6ba5c2beee99fd218ce253b9e45b1f0b0f646a8a38acad64736f6c63430008090033",
  "deployedBytecode": "0x608060405234801561001057600080fd5b50600436106100ea5760003560e01c80638f4cd0981161008c578063f3fef3a311610066578063f3fef3a31461027c578063f6153ccd1461028f578063f89cbd5f14610298578063fee1a9c8146102bb57600080fd5b80638f4cd0981461024357806391c7bc7014610256578063aad3ec961461026957600080fd5b8063327d83b8116100c8578063327d83b81461017d5780633ccfa933146101ba57806347e7ef24146101e15780636392a51f1461023057600080fd5b8063091c76f5146100ef5780630e15561a14610133578063224eaa901461014a575b600080fd5b6101167f000000000000000000000000000000000000000000000000000000000000000081565b6040516001600160a01b0390911681526020015b60405180910390f35b61013c60025481565b60405190815260200161012a565b61015d610158366004610cdf565b6102e2565b60408051948552602085019390935291830152606082015260800161012a565b61019061018b366004610cdf565b61030a565b604080516001600160a01b039095168552602085019390935291830152606082015260800161012a565b61013c7f000000000000000000000000000000000000000000000000000000000000000081565b6101f46101ef366004610cdf565b61035a565b60405161012a919081516001600160a01b0316815260208083015190820152604080830151908201526060918201519181019190915260800190565b61015d61023e366004610d09565b610640565b61013c610251366004610cdf565b610743565b61013c610264366004610cdf565b61075e565b61013c610277366004610cdf565b610772565b61013c61028a366004610cdf565b6107e4565b61013c60015481565b6102ab6102a6366004610cdf565b61084f565b604051901515815260200161012a565b61013c7f000000000000000000000000000000000000000000000000000000000000000081565b6000806000806102fa6102f58787610863565b610913565b9299919850965090945092505050565b6000602052816000526040600020818154811061032657600080fd5b600091825260209091206004909102018054600182015460028301546003909301546001600160a01b039092169450925084565b61038e604051806080016040528060006001600160a01b031681526020016000815260200160008152602001600081525090565b604051636eb1769f60e11b815233600482015230602482015282906001600160a01b0385169063dd62ed3e9060440160206040518083038186803b1580156103d557600080fd5b505afa1580156103e9573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061040d9190610d24565b10156104575760405162461bcd60e51b81526020600482015260146024820152734e6f7420656e6f75676820616c6c6f77616e636560601b60448201526064015b60405180910390fd5b6040516323b872dd60e01b8152336004820152306024820152604481018390526001600160a01b038416906323b872dd90606401602060405180830381600087803b1580156104a557600080fd5b505af11580156104b9573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906104dd9190610d3d565b61051a5760405162461bcd60e51b815260206004820152600e60248201526d11195c1bdcda5d0819985a5b195960921b604482015260640161044e565b6001600160a01b03831681526020810182905260018054839190600090610542908490610d75565b90915550600090507f0000000000000000000000000000000000000000000000000000000000000000633b9aca0061059a7f000000000000000000000000000000000000000000000000000000000000000086610d8d565b6105a49190610dac565b6105ae9190610d8d565b90508082604001818152505080600260008282546105cc9190610d75565b909155505043606083019081523360009081526020818152604080832080546001808201835591855293839020875160049095020180546001600160a01b0319166001600160a01b039095169490941784559186015191830191909155840151600282015590516003909101555092915050565b60008060008060005b6001600160a01b03861660009081526020819052604090205481101561073b576001600160a01b038616600090815260208190526040812080548390811061069357610693610dce565b600091825260209182902060408051608081018252600490930290910180546001600160a01b03168352600181015493830184905260028101549183019190915260030154606082015291506106e99087610d75565b95508060400151856106fb9190610d75565b94506107068161093d565b6107109085610d75565b935061071b8161095f565b6107259084610d75565b92506107349050600182610d75565b9050610649565b509193509193565b60006107576107528484610863565b61095f565b9392505050565b600061075761076d8484610863565b61093d565b6000805b6001600160a01b0384166000908152602081905260409020548110801561079d5750600083115b156107dd5760006107af8585846109c2565b90506107bb8185610de4565b93506107c78184610d75565b92506107d69050600182610d75565b9050610776565b5092915050565b6000805b6001600160a01b0384166000908152602081905260409020548110801561080f5750600083115b156107dd576000610821858584610b56565b905061082d8185610de4565b93506108398184610d75565b92506108489050600182610d75565b90506107e8565b600061075761085e8484610863565b610c75565b610897604051806080016040528060006001600160a01b031681526020016000815260200160008152602001600081525090565b6001600160a01b03831660009081526020819052604090208054839081106108c1576108c1610dce565b600091825260209182902060408051608081018252600490930290910180546001600160a01b031683526001810154938301939093526002830154908201526003909101546060820152905092915050565b602081015160408201516000806109298561093d565b91506109348561095f565b90509193509193565b600061094882610c75565b610956578160200151610959565b60005b92915050565b600061096a82610c75565b610978578160400151610959565b7f00000000000000000000000000000000000000000000000000000000000000008260600151436109a99190610de4565b83604001516109b89190610d8d565b6109599190610dac565b6001600160a01b03831660009081526020819052604081208054829190849081106109ef576109ef610dce565b600091825260209182902060408051608081018252600490930290910180546001600160a01b0316835260018101549383019390935260028301549082015260038201546060820152909150610a4490610c75565b80610a5157506002810154155b15610a5f5760009150610b4e565b8060020154841115610a75578060020154610a77565b835b91508160026000828254610a8b9190610de4565b9250508190555081816002016000828254610aa69190610de4565b909155505060405163a9059cbb60e01b8152336004820152602481018390527f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03169063a9059cbb906044015b602060405180830381600087803b158015610b1457600080fd5b505af1158015610b28573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610b4c9190610d3d565b505b509392505050565b6001600160a01b0383166000908152602081905260408120805482919084908110610b8357610b83610dce565b600091825260209182902060408051608081018252600490930290910180546001600160a01b0316835260018101549383019390935260028301549082015260038201546060820152909150610bd890610c75565b80610be557506001810154155b15610bf35760009150610b4e565b8060010154841115610c09578060010154610c0b565b835b91508160016000828254610c1f9190610de4565b9250508190555081816001016000828254610c3a9190610de4565b9091555050805460405163a9059cbb60e01b8152336004820152602481018490526001600160a01b039091169063a9059cbb90604401610afa565b60008160600151431015610c8b57610c8b610dfb565b7f0000000000000000000000000000000000000000000000000000000000000000826060015143610cbc9190610de4565b1092915050565b80356001600160a01b0381168114610cda57600080fd5b919050565b60008060408385031215610cf257600080fd5b610cfb83610cc3565b946020939093013593505050565b600060208284031215610d1b57600080fd5b61075782610cc3565b600060208284031215610d3657600080fd5b5051919050565b600060208284031215610d4f57600080fd5b8151801515811461075757600080fd5b634e487b7160e01b600052601160045260246000fd5b60008219821115610d8857610d88610d5f565b500190565b6000816000190483118215151615610da757610da7610d5f565b500290565b600082610dc957634e487b7160e01b600052601260045260246000fd5b500490565b634e487b7160e01b600052603260045260246000fd5b600082821015610df657610df6610d5f565b500390565b634e487b7160e01b600052600160045260246000fdfea2646970667358221220087962b43b453ae80a6ba5c2beee99fd218ce253b9e45b1f0b0f646a8a38acad64736f6c63430008090033",
  "devdoc": {
    "kind": "dev",
    "methods": {},
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 835,
        "contract": "contracts/SimpleBond.sol:SimpleBond",
        "label": "bonds",
        "offset": 0,
        "slot": "0",
        "type": "t_mapping(t_address,t_array(t_struct(Bond)829_storage)dyn_storage)"
      },
      {
        "astId": 837,
        "contract": "contracts/SimpleBond.sol:SimpleBond",
        "label": "totalDeposit",
        "offset": 0,
        "slot": "1",
        "type": "t_uint256"
      },
      {
        "astId": 839,
        "contract": "contracts/SimpleBond.sol:SimpleBond",
        "label": "totalRewards",
        "offset": 0,
        "slot": "2",
        "type": "t_uint256"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_struct(Bond)829_storage)dyn_storage": {
        "base": "t_struct(Bond)829_storage",
        "encoding": "dynamic_array",
        "label": "struct SimpleBond.Bond[]",
        "numberOfBytes": "32"
      },
      "t_mapping(t_address,t_array(t_struct(Bond)829_storage)dyn_storage)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => struct SimpleBond.Bond[])",
        "numberOfBytes": "32",
        "value": "t_array(t_struct(Bond)829_storage)dyn_storage"
      },
      "t_struct(Bond)829_storage": {
        "encoding": "inplace",
        "label": "struct SimpleBond.Bond",
        "members": [
          {
            "astId": 822,
            "contract": "contracts/SimpleBond.sol:SimpleBond",
            "label": "token",
            "offset": 0,
            "slot": "0",
            "type": "t_address"
          },
          {
            "astId": 824,
            "contract": "contracts/SimpleBond.sol:SimpleBond",
            "label": "deposit",
            "offset": 0,
            "slot": "1",
            "type": "t_uint256"
          },
          {
            "astId": 826,
            "contract": "contracts/SimpleBond.sol:SimpleBond",
            "label": "rewards",
            "offset": 0,
            "slot": "2",
            "type": "t_uint256"
          },
          {
            "astId": 828,
            "contract": "contracts/SimpleBond.sol:SimpleBond",
            "label": "block",
            "offset": 0,
            "slot": "3",
            "type": "t_uint256"
          }
        ],
        "numberOfBytes": "128"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}